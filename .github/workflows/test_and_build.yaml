name: Container tests
on:
  workflow_dispatch:
  push:
jobs:
  test:
    name: Run unit tests and vignettes
    runs-on: ubuntu-latest
    container:
      image: us.gcr.io/broad-dsp-gcr-public/anvil-rstudio-bioconductor:3.18.0
    steps:
      - uses: actions/checkout@v4
      
      - name: Install package and deps
        run: |
          mkdir -p /tmp/.github/logs
          Rscript -e "options(repos = c(CRAN = 'https://packagemanager.posit.co/cran/__linux__/jammy/latest')); BiocManager::install(ask=FALSE); devtools::install('.', dependencies=TRUE, build_vignettes=FALSE, repos = BiocManager::repositories())" > /tmp/.github/logs/install.txt

      - name: Run unit tests
        run: Rscript -e 'devtools::test()' > /tmp/.github/logs/unit-tests.txt

      - name: Render vignettes
        run: |
          Rscript -e 'library(devtools); load_all(); build_vignettes()' > /tmp/.github/logs/vignettes.txt
          mkdir /tmp/.github/logs/vignettes
          mv doc /tmp/.github/logs/vignettes/doc || true
          mv Meta /tmp/.github/logs/vignettes/Meta || true

      - name: Push new file
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 50
          shell: bash
          command: |
            set -x
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git pull origin main || git reset --hard origin/main
            git config user.name github-actions
            git config user.email github-actions@github.com
            rm -rf .github/logs
            cp -r /tmp/.github/logs .github/logs
            git add .github
            git commit -m "Add run logs $(TZ=EST date '+%Y-%m-%d_%H-%M')"
            git push

  dockerbuild:
    name: Build AnVIL docker image
    outputs:
      containername: ${{ steps.vars.outputs.container }}
    env:
      BUILDX_NO_DEFAULT_ATTESTATIONS: 1
      BUILDKIT_STEP_LOG_MAX_SIZE: 50000000
    runs-on: ubuntu-latest
    steps:
      - name: Free root space
        uses: almahmoud/free-root-space@main
        with:
          verbose: true

      - uses: actions/checkout@v4

      - name: Extract container name without tag
        id: vers
        run: |
          echo basever=$(cat anvil.Dockerfile | head -n 1 | awk -F':' '{print $NF}') >> $GITHUB_OUTPUT

      - name: Extract metadata for container image
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{steps.vers.outputs.basever}} 

      - name: Extract container name without tag
        id: vars
        run: |
          echo container=$(echo '${{ steps.meta.outputs.tags }}' | awk -F':' '{print $1}') >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image to ghcr
        id: build
        uses: docker/build-push-action@v4
        with:
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ steps.vars.outputs.container }},push-by-digest=true,name-canonical=true,push=true
          provenance: false
          file: anvil.Dockerfile

  badge_job:
    name: Scraping results and adding badges
    runs-on: ubuntu-latest
    needs: [test, dockerbuild]
    steps:
      - uses: actions/checkout@v4
      - id: results
        run: |
          git pull origin main || git reset --hard origin/main
          echo UNITFAIL=$(cat .github/logs/unit-tests.txt | tail -n 1 | tr -d '][' | awk -F '|' '{print $1}' | awk '{print $NF}') >> $GITHUB_OUTPUT
          echo UNITWARN=$(cat .github/logs/unit-tests.txt | tail -n 1 | tr -d '][' | awk -F '|' '{print $2}' | awk '{print $NF}') >> $GITHUB_OUTPUT
          echo UNITPASS=$(cat .github/logs/unit-tests.txt | tail -n 1 | tr -d '][' | awk -F '|' '{print $4}' | awk '{print $NF}') >> $GITHUB_OUTPUT
          echo currdate=$(TZ=EST date '+%Y-%m-%d %H:%M') >> $GITHUB_OUTPUT
          mkdir -p /tmp/badges

      - uses: emibcn/badge-action@v2.0.2
        with:
          label: 'Latest update'
          status: '${{steps.results.outputs.currdate}}'
          color: '555'
          path: '/tmp/badges/date.svg'

      - uses: emibcn/badge-action@v2.0.2
        if: steps.results.outputs.UNITFAIL != 0
        with:
          label: 'Unit Tests'
          status: '${{steps.results.outputs.UNITFAIL}} failing'
          color: 'red'
          path: '/tmp/badges/unit-fail.svg'

      - uses: emibcn/badge-action@v2.0.2
        if: steps.results.outputs.UNITWARN != 0
        with:
          label: 'Unit Tests'
          status: '${{steps.results.outputs.UNITWARN}} warnings'
          color: 'orange'
          path: '/tmp/badges/unit-warn.svg'

      - uses: emibcn/badge-action@v2.0.2
        if: steps.results.outputs.UNITPASS != 0
        with:
          label: 'Unit Tests'
          status: '${{steps.results.outputs.UNITPASS}} passing'
          color: 'green'
          path: '/tmp/badges/unit-pass.svg'

      - uses: emibcn/badge-action@v2.0.2
        with:
          label: 'AnVIL Custom Image'
          status: '${{needs.dockerbuild.outputs.containername}}'
          color: 'green'
          path: '/tmp/badges/anvil-container.svg'

      - name: Push new file
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 50
          shell: bash
          command: |
            set -x
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git pull origin main || git reset --hard origin/main
            git config user.name github-actions
            git config user.email github-actions@github.com
            rm -rf .github/badges
            cp -r /tmp/badges .github/badges
            BADGELINES=$(awk '/^#/{exit} /^\[*!\[/{count++} END{print count}' README.md)
            # Remove badges
            tail -n +$((BADGELINES + 1)) README.md > /tmp/README.md
            # Add badges to new README
            ls .github/badges/ | xargs -i sed -i '1i![{}](https://raw.githubusercontent.com/${{github.repository_owner}}/${{ github.event.repository.name }}/main/.github/badges/{})' /tmp/README.md
            # Add URLs to unit badges
            sed -i '/\.github\/badges\/unit-/s/^/[/' /tmp/README.md
            sed -i '/\.github\/badges\/unit-/s/$/](https:\/\/raw\.githubusercontent\.com\/${{github.repository_owner}}\/${{ github.event.repository.name }}\/main\/\.github\/logs\/unit-tests\.txt)/' /tmp/README.md
            # Add URL to custom image
            sed -i '/\.github\/badges\/anvil-container/s/^/[/' /tmp/README.md
            sed -i '/\.github\/badges\/anvil-container/s/$/](https:\/\/github.com\/${{github.repository_owner}}\/${{ github.event.repository.name }}\/pkgs\/container\/${{ github.event.repository.name }})/' /tmp/README.md
            cp /tmp/README.md README.md
            git add .github
            git add README.md
            git commit -m "Update badges $(TZ=EST date '+%Y-%m-%d_%H-%M')"
            git push
